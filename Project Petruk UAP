#include <iostream>
#include <unordered_map>
#include <vector>
#include <cstring>
#include <ctime>
#include <iomanip>

using namespace std;

// Class template untuk transaksi
template<typename T>
class Transaction {
public:
    T type;
    double amount;
    T targetAccount;
    T timestamp;

    Transaction() : amount(0.0) {}

    Transaction(T t, double a, T ta, T ts) : type(t), amount(a), targetAccount(ta), timestamp(ts) {}
};

// Class untuk menyimpan informasi akun
class Account {
public:
    char username[20];
    char password[20];
    double balance;
    vector<Transaction<string>> transactions;

    Account(const char* u, const char* p) : balance(0.0) {
        strcpy(username, u);
        strcpy(password, p);
    }

    void showBalance() {
        cout << "Saldo Anda: " << fixed << setprecision(2) << balance << " USD" << endl;
    }

    void showTransactions() {
        cout << "Riwayat Transaksi: " << endl;
        for (const auto& t : transactions) {
            cout << t.timestamp << " - " << t.type << " " << t.amount << " USD ke " << t.targetAccount << endl;
        }
    }

 void addTransaction(const Transaction<string>& transaction) {
        transactions.push_back(transaction);
    }
};

// Class untuk menyimpan informasi sistem bank
class BankSystem {
private:
    unordered_map<string, Account*> accounts;

    string getCurrentTime() {
        time_t now = time(0);
        tm* ltm = localtime(&now);
        char timeStr[20];
        sprintf(timeStr, "%04d-%02d-%02d %02d:%02d:%02d",
                1900 + ltm->tm_year,
                1 + ltm->tm_mon,
                ltm->tm_mday,
                ltm->tm_hour,
                ltm->tm_min,
                ltm->tm_sec);
        return string(timeStr);
    }

public:
    ~BankSystem() {
        for (auto& pair : accounts) {
            delete pair.second;
        }
    }

void registerUser(const char* username, const char* password) {
        if (accounts.find(username) != accounts.end()) {
            cout << "Nama pengguna sudah terdaftar!" << endl;
            return;
        }
        accounts[username] = new Account(username, password);
        cout << "Registrasi berhasil!" << endl;
    }

    bool loginUser(const char* username, const char* password) {
        if (accounts.find(username) == accounts.end() || strcmp(accounts[username]->password, password) != 0) {
            cout << "Nama pengguna atau kata sandi salah!" << endl;
            return false;
        }
        cout << "Login berhasil!" << endl;
        return true;
    }

void transferFunds(const char* sender, const char* receiver, double amount) {
        if (accounts.find(receiver) == accounts.end()) {
            cout << "Akun penerima tidak ditemukan!" << endl;
            return;
        }
        if (accounts[sender]->balance < amount) {
            cout << "Saldo tidak mencukupi!" << endl;
            return;
        }

        accounts[sender]->balance -= amount;
        accounts[receiver]->balance += amount;
        string timestamp = getCurrentTime();
        accounts[sender]->addTransaction(Transaction<string>("Transfer ke", amount, receiver, timestamp));
        accounts[receiver]->addTransaction(Transaction<string>("Transfer dari", amount, sender, timestamp));
        cout << "Transfer berhasil!" << endl;
        printReceipt(sender, "Transfer ke", amount, receiver, timestamp.c_str());
    }


void fillBalance(const char* username, double amount) {
        accounts[username]->balance += amount;
        string timestamp = getCurrentTime();
        accounts[username]->addTransaction(Transaction<string>("Isi Saldo", amount, username, timestamp));
        cout << "Isi saldo berhasil!" << endl;
        printReceipt(username, "Isi Saldo", amount, username, timestamp.c_str());
    }

    void printReceipt(const char* username, const char* type, double amount, const char* targetAccount, const char* timestamp) {
        cout << "Struk Transaksi: " << endl;
        cout << "==============================" << endl;
        cout << "Username      : " << username << endl;
        cout << "Tipe Transaksi: " << type << endl;
        cout << "Jumlah        : " << fixed << setprecision(2) << amount << " USD" << endl;
        cout << "Akun Tujuan   : " << targetAccount << endl;
        cout << "Waktu         : " << timestamp << endl;
        cout << "==============================" << endl;
    }

    Account* getAccount(const char* username) {
        if (accounts.find(username) != accounts.end()) {
            return accounts[username];
        }
        return nullptr;
    }
};

void divideAndConquerSort(vector<Transaction<string>>& transactions, int left, int right) {
    if (left >= right) return;

    int mid = left + (right - left) / 2;
    divideAndConquerSort(transactions, left, mid);
    divideAndConquerSort(transactions, mid + 1, right);

    vector<Transaction<string>> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;

    while (i <= mid && j <= right) {
        if (transactions[i].timestamp <= transactions[j].timestamp) {
            temp[k++] = transactions[i++];
        } else {
            temp[k++] = transactions[j++];
        }
    }

    while (i <= mid) temp[k++] = transactions[i++];
    while (j <= right) temp[k++] = transactions[j++];

    for (int i = left; i <= right; ++i) {
        transactions[i] = temp[i - left];
    }
}
