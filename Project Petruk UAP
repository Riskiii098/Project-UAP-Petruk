#include <iostream>
#include <unordered_map>
#include <vector>
#include <cstring>
#include <ctime>
#include <iomanip>

using namespace std;

// Class template untuk transaksi
template<typename T>
class Transaction {
public:
    T type;
    double amount;
    T targetAccount;
    T timestamp;

    Transaction() : amount(0.0) {}

    Transaction(T t, double a, T ta, T ts) : type(t), amount(a), targetAccount(ta), timestamp(ts) {}
};

// Class untuk menyimpan informasi akun
class Account {
public:
    char username[20];
    char password[20];
    double balance;
    vector<Transaction<string>> transactions;

    Account(const char* u, const char* p) : balance(0.0) {
        strcpy(username, u);
        strcpy(password, p);
    }

    void showBalance() {
        cout << "Saldo Anda: " << fixed << setprecision(2) << balance << " USD" << endl;
    }

    void showTransactions() {
        cout << "Riwayat Transaksi: " << endl;
        for (const auto& t : transactions) {
            cout << t.timestamp << " - " << t.type << " " << t.amount << " USD ke " << t.targetAccount << endl;
        }
    }

 void addTransaction(const Transaction<string>& transaction) {
        transactions.push_back(transaction);
    }
};

// Class untuk menyimpan informasi sistem bank
class BankSystem {
private:
    unordered_map<string, Account*> accounts;

    string getCurrentTime() {
        time_t now = time(0);
        tm* ltm = localtime(&now);
        char timeStr[20];
        sprintf(timeStr, "%04d-%02d-%02d %02d:%02d:%02d",
                1900 + ltm->tm_year,
                1 + ltm->tm_mon,
                ltm->tm_mday,
                ltm->tm_hour,
                ltm->tm_min,
                ltm->tm_sec);
        return string(timeStr);
    }

public:
    ~BankSystem() {
        for (auto& pair : accounts) {
            delete pair.second;
        }
    }
